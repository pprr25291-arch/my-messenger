class AdminPanel {
    constructor() {
        this.isAdmin = false;
        this.adminUsername = 'admin'; // –ò–º—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        this.init();
    }

    init() {
        this.checkAdminStatus();
        this.createAdminUI();
        this.setupSocketListeners();
    }

    checkAdminStatus() {
        const username = document.getElementById('username')?.textContent;
        this.isAdmin = username === this.adminUsername;
    }

    createAdminUI() {
        if (!this.isAdmin) return;

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –≤ header
        const header = document.querySelector('header');
        if (header) {
            const adminBtn = document.createElement('button');
            adminBtn.className = 'header-btn';
            adminBtn.id = 'adminBtn';
            adminBtn.textContent = '‚öôÔ∏è –ê–¥–º–∏–Ω';
            adminBtn.style.background = '#dc3545';
            
            header.querySelector('.header-buttons').appendChild(adminBtn);
            
            adminBtn.addEventListener('click', () => this.toggleAdminPanel());
        }

        // –°–æ–∑–¥–∞–µ–º –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        const adminPanel = document.createElement('div');
        adminPanel.id = 'adminPanel';
        adminPanel.style.cssText = `
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            width: 500px;
            background: white;
            border-radius: 15px;
            box-shadow: 0 10px 40px rgba(0,0,0,0.3);
            z-index: 10000;
            padding: 25px;
            display: none;
        `;

        adminPanel.innerHTML = `
            <div class="admin-header">
                <h3>‚öôÔ∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</h3>
                <button class="close-admin" style="background: none; border: none; font-size: 20px; cursor: pointer;">‚úï</button>
            </div>
            
            <div class="admin-tabs">
                <button class="tab-btn active" data-tab="notifications">üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</button>
                <button class="tab-btn" data-tab="users">üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</button>
                <button class="tab-btn" data-tab="system">üõ†Ô∏è –°–∏—Å—Ç–µ–º–∞</button>
            </div>
            
            <div class="tab-content">
                <div id="notificationsTab" class="tab-pane active">
                    <div class="form-group">
                        <label>–¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</label>
                        <select id="notificationType" class="form-control">
                            <option value="global">–í—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º</option>
                            <option value="user">–ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é</option>
                        </select>
                    </div>
                    
                    <div id="userSelection" class="form-group" style="display: none;">
                        <label>–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</label>
                        <input type="text" id="targetUser" class="form-control" placeholder="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è">
                    </div>
                    
                    <div class="form-group">
                        <label>–°–æ–æ–±—â–µ–Ω–∏–µ:</label>
                        <textarea id="adminMessage" class="form-control" rows="4" placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ..."></textarea>
                    </div>
                    
                    <div class="form-group">
                        <label>–¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è:</label>
                        <select id="messageType" class="form-control">
                            <option value="info">‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</option>
                            <option value="warning">‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ</option>
                            <option value="error">‚ùå –û—à–∏–±–∫–∞</option>
                            <option value="success">‚úÖ –£—Å–ø–µ—Ö</option>
                        </select>
                    </div>
                    
                    <button id="sendNotification" class="btn btn-primary">üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</button>
                </div>
                
                <div id="usersTab" class="tab-pane">
                    <div class="users-list" id="onlineUsersList">
                        <h4>üë• –û–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</h4>
                        <div class="users-container"></div>
                    </div>
                </div>
                
                <div id="systemTab" class="tab-pane">
                    <div class="system-actions">
                        <button id="clearChat" class="btn btn-warning">üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –æ–±—â–∏–π —á–∞—Ç</button>
                        <button id="maintenanceMode" class="btn btn-danger">üõ†Ô∏è –†–µ–∂–∏–º —Ç–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è</button>
                        <button id="exportData" class="btn btn-info">üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö</button>
                    </div>
                </div>
            </div>
        `;

        document.body.appendChild(adminPanel);
        this.setupAdminEvents();
    }

    setupAdminEvents() {
        const adminPanel = document.getElementById('adminPanel');
        const closeBtn = adminPanel.querySelector('.close-admin');
        const tabBtns = adminPanel.querySelectorAll('.tab-btn');
        const notificationType = adminPanel.querySelector('#notificationType');
        const userSelection = adminPanel.querySelector('#userSelection');
        const sendNotification = adminPanel.querySelector('#sendNotification');

        closeBtn.addEventListener('click', () => this.hideAdminPanel());

        tabBtns.forEach(btn => {
            btn.addEventListener('click', () => this.switchTab(btn.dataset.tab));
        });

        notificationType.addEventListener('change', (e) => {
            userSelection.style.display = e.target.value === 'user' ? 'block' : 'none';
        });

        sendNotification.addEventListener('click', () => this.sendSystemNotification());
        
        // –î—Ä—É–≥–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        adminPanel.querySelector('#clearChat').addEventListener('click', () => this.clearGlobalChat());
        adminPanel.querySelector('#maintenanceMode').addEventListener('click', () => this.toggleMaintenance());
        adminPanel.querySelector('#exportData').addEventListener('click', () => this.exportData());
    }

    toggleAdminPanel() {
        const adminPanel = document.getElementById('adminPanel');
        adminPanel.style.display = adminPanel.style.display === 'none' ? 'block' : 'none';
        
        if (adminPanel.style.display === 'block') {
            this.loadOnlineUsers();
        }
    }

    hideAdminPanel() {
        document.getElementById('adminPanel').style.display = 'none';
    }

    switchTab(tabName) {
        // –°–∫—Ä—ã—Ç—å –≤—Å–µ –≤–∫–ª–∞–¥–∫–∏
        document.querySelectorAll('.tab-pane').forEach(pane => {
            pane.classList.remove('active');
        });
        document.querySelectorAll('.tab-btn').forEach(btn => {
            btn.classList.remove('active');
        });
        
        // –ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤–∫–ª–∞–¥–∫—É
        document.getElementById(tabName + 'Tab').classList.add('active');
        document.querySelector(`[data-tab="${tabName}"]`).classList.add('active');
    }

    async sendSystemNotification() {
        const message = document.getElementById('adminMessage').value.trim();
        const type = document.getElementById('notificationType').value;
        const targetUser = document.getElementById('targetUser').value.trim();
        const messageType = document.getElementById('messageType').value;

        if (!message) {
            this.showNotification('–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', 'error');
            return;
        }

        if (type === 'user' && !targetUser) {
            this.showNotification('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'error');
            return;
        }

        try {
            const response = await fetch('/api/admin/notification', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    message: message,
                    type: type,
                    targetUser: targetUser,
                    messageType: messageType
                })
            });

            if (response.ok) {
                this.showNotification('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', 'success');
                document.getElementById('adminMessage').value = '';
                document.getElementById('targetUser').value = '';
            } else {
                throw new Error('Failed to send notification');
            }
        } catch (error) {
            this.showNotification('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', 'error');
        }
    }

    async loadOnlineUsers() {
        try {
            const response = await fetch('/api/users/online');
            const users = await response.json();
            
            const container = document.querySelector('#onlineUsersList .users-container');
            container.innerHTML = '';
            
            users.forEach(user => {
                const userElement = document.createElement('div');
                userElement.className = 'user-item';
                userElement.innerHTML = `
                    <span>üë§ ${user.username}</span>
                    <span class="user-status">${user.isOnline ? 'üü¢' : 'üî¥'}</span>
                `;
                container.appendChild(userElement);
            });
        } catch (error) {
            console.error('Error loading online users:', error);
        }
    }

    async clearGlobalChat() {
        if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –æ–±—â–∏–π —á–∞—Ç?')) {
            try {
                const response = await fetch('/api/admin/clear-chat', {
                    method: 'POST'
                });
                
                if (response.ok) {
                    this.showNotification('–ß–∞—Ç –æ—á–∏—â–µ–Ω', 'success');
                }
            } catch (error) {
                this.showNotification('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —á–∞—Ç–∞', 'error');
            }
        }
    }

    toggleMaintenance() {
        // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∂–∏–º–∞ —Ç–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
        this.showNotification('–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ', 'info');
    }

    exportData() {
        // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
        this.showNotification('–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ', 'info');
    }

    setupSocketListeners() {
        if (window.socket) {
            window.socket.on('system_notification', (data) => {
                this.displaySystemNotification(data);
            });
        }
    }

    displaySystemNotification(data) {
        const messagesContainer = document.getElementById('messages');
        if (!messagesContainer) return;

        const notificationElement = document.createElement('div');
        notificationElement.className = `system-notification ${data.messageType || 'info'}`;
        
        const icons = {
            info: '‚ÑπÔ∏è',
            warning: '‚ö†Ô∏è',
            error: '‚ùå',
            success: '‚úÖ'
        };

        notificationElement.innerHTML = `
            <div class="notification-header">
                <span class="notification-icon">${icons[data.messageType] || '‚ÑπÔ∏è'}</span>
                <strong>–°–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</strong>
                <span class="notification-time">${new Date().toLocaleTimeString()}</span>
            </div>
            <div class="notification-message">${data.message}</div>
        `;

        messagesContainer.appendChild(notificationElement);
        this.scrollToBottom();
    }

    scrollToBottom() {
        const messagesContainer = document.getElementById('messages');
        if (messagesContainer) {
            setTimeout(() => {
                messagesContainer.scrollTop = messagesContainer.scrollHeight;
            }, 100);
        }
    }

    showNotification(message, type = 'info') {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        if (window.privateChatInstance) {
            window.privateChatInstance.showNotification(message, type);
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
document.addEventListener('DOMContentLoaded', function() {
    setTimeout(() => {
        window.adminPanel = new AdminPanel();
    }, 1000);
})// –î–æ–±–∞–≤—å—Ç–µ –ø–æ—Å–ª–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤

// API –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
app.post('/api/admin/send-notification', authenticateToken, async (req, res) => {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        if (req.user.username !== 'admin') {
            return res.status(403).json({ error: '–¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' });
        }

        const { message, type, targetUser, messageType } = req.body;
        
        if (!message) {
            return res.status(400).json({ error: '–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ' });
        }

        const notificationData = {
            message: message,
            type: messageType || 'info',
            timestamp: new Date().toLocaleTimeString(),
            date: new Date().toISOString(),
            isSystem: true
        };

        if (type === 'global' || !targetUser) {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            io.emit('system_notification', notificationData);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∫ —Å–∏—Å—Ç–µ–º–Ω–æ–µ
            messages.push({
                username: 'SYSTEM',
                message: `[${messageType?.toUpperCase() || 'INFO'}] ${message}`,
                timestamp: notificationData.timestamp,
                type: 'global',
                date: notificationData.date
            });
            
        } else if (type === 'user' && targetUser) {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            const targetSocketId = userSockets.get(targetUser);
            if (targetSocketId) {
                io.to(targetSocketId).emit('system_notification', notificationData);
            }
        }

        await saveMessages();
        res.json({ success: true });
        
    } catch (error) {
        console.error('Admin notification error:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è' });
    }
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
app.get('/api/users/all', authenticateToken, (req, res) => {
    try {
        const currentUser = req.user.username;
        const usersWithoutPasswords = users
            .filter(user => user.username !== currentUser)
            .map(({ password, ...user }) => {
                return {
                    ...user,
                    isOnline: onlineUsers.has(user.username)
                };
            });
        
        res.json(usersWithoutPasswords);
    } catch (error) {
        console.error('Error getting all users:', error);
        res.status(500).json({ error: 'Failed to get users' });
    }
});

// API –¥–ª—è –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
app.get('/api/users/online', authenticateToken, (req, res) => {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        if (req.user.username !== 'admin') {
            return res.status(403).json({ error: '–¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' });
        }
        
        const onlineUsersList = Array.from(onlineUsers).map(username => ({
            username: username,
            isOnline: true
        }));
        
        res.json(onlineUsersList);
    } catch (error) {
        console.error('Error loading online users:', error);
        res.status(500).json({ error: 'Failed to load online users' });
    }
});